---
export const prerender = false;
import Layout from "../../layouts/Layout.astro";

console.log("[especialidades] URL:", Astro.url.toString());

const letraSeleccionada =
  Astro.url.searchParams.get("letra")?.toUpperCase() ?? null;

const apiUrl = new URL("/api/especialidades", Astro.url);
const res = await fetch(apiUrl.toString(), { headers: { "cache-control": "no-cache" } });
let especialidades = await res.json();

console.log(
  "[especialidades] esArray:", Array.isArray(especialidades),
  "len:",
  Array.isArray(especialidades) ? especialidades.length : (especialidades?.data?.length ?? "n/a")
);

if (!Array.isArray(especialidades)) {
  especialidades = especialidades.data ?? [];
}
const especialidadesPorLetra = especialidades.reduce(
  (acc: Record<string, { nombre: string; id: number }[]>, esp: { nombre: string; id: number }) => {
    const letra = String(esp.nombre ?? "").trim().charAt(0).toUpperCase();
    if (!letra) return acc;
    if (!acc[letra]) acc[letra] = [];
    acc[letra].push(esp);
    return acc;
  },
  {}
);


console.log(
  "[especialidades] letras con datos:",
  Object.keys(especialidadesPorLetra).sort().join(",") || "(ninguna)"
);

const letras = "ABCDEFGHIJKLMNOPQRSTUVWXYZÑ".split("");
---

<Layout title="Especialidades">
  <section class="p-6 max-w-6xl mx-auto">
    <h1 class="text-3xl font-bold mb-6 text-center md:text-left">
      Índice de Especialidades
    </h1>

    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
      <div class="md:col-span-1">
        <div class="grid grid-cols-8 sm:grid-cols-12 md:grid-cols-4 gap-2 sticky top-6">
          {letras.map((letra) => {
            const activa = letraSeleccionada === letra;
            const habilitada = !!especialidadesPorLetra[letra];
            return (
              <a
                href={`?letra=${letra}`}
                rel="external"
                class={`p-2 text-center rounded-lg text-sm sm:text-base transition block ${
                  habilitada
                    ? activa
                      ? "bg-blue-600 text-white"
                      : "bg-blue-500 text-white hover:bg-blue-600"
                    : "bg-gray-200 text-gray-400 cursor-not-allowed pointer-events-none"
                }`}
              >
                {letra}
              </a>
            );
          })}
        </div>
      </div>

      <div class="md:col-span-2 space-y-8">
        {letraSeleccionada ? (
          especialidadesPorLetra[letraSeleccionada] ? (
            <div>
              <h2 class="text-2xl font-semibold text-blue-600 mb-3">
                {letraSeleccionada}
              </h2>
              <ul class="list-disc list-inside space-y-1">
                {especialidadesPorLetra[letraSeleccionada].map((esp: { id: any; nombre: unknown; }) => (
                  <li>
                    <a
                      href={`/especialidades/${esp.id}`}
                      class="text-blue-600 hover:underline"
                    >
                      {esp.nombre}
                    </a>
                  </li>
                ))}
              </ul>
            </div>
          ) : (
            <p class="text-gray-500">No hay especialidades para la letra seleccionada.</p>
          )
        ) : (
          <p class="text-gray-500">Selecciona una letra para ver las especialidades.</p>
        )}
      </div>
    </div>
  </section>
</Layout>
